#!groovy
// Check host propertys
properties([disableConcurrentBuilds()])
def image = ''

pipeline {
    agent none
    /* triggers { pollSCM('H/5 * * * *') } */
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
        skipDefaultCheckout()
        ansiColor('xterm')
        }
    stages {
        stage('Checkout git'){
            agent { 
                node { 
                label 'master' 
                }
            }
            steps {
                checkout scm
            }
        }
        stage('Building test image') {
            agent {
                dockerfile {
                filename 'Dockerfile-01'
                dir 'docker/test'
              }
            }
            stages {
                stage('BUILD') {
                    steps {
                        echo '######### BUILD PAYLOAD  ######'
                    }
                }
                stage('Testing image') {
                    steps {
                        sh 'nc -vz 8.8.8.8 443'
                        echo '############ tls handshake  ########################'
                        sh 'curl -i 1.1.1.1'
                    }
                }
            }
        }  
        stage( 'Tagging image' ) {
            agent { 
                node { 
                label 'master' 
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'lockal_registry_login', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                    docker login localhost:5000 -u $USERNAME -p $PASSWORD
                    """
                    sh "curl -su $USERNAME:$PASSWORD localhost:8080/job/$JOB_BASE_NAME/lastBuild/consoleText | grep 'build -t [a-z0-9]' | cut -d ' ' -f 6 | tr -d '\n' > tmp_param.txt"
                    sh 'cat tmp_param.txt'
                    script {
                        image = readFile('tmp_param.txt').trim()
                    }
                    sh 'printenv'
                    sh "docker tag ${image} localhost:5000/test_alpine:${JOB_BASE_NAME}.${BUILD_DISPLAY_NAME}"
                    sh 'docker image ls' 
                }  
            }
        }
       /* stage( 'Push image' ) {
            steps {
               sh 'echo " ###### push image to registry  ########### " '
            }
        } */
       /* sh "docker rmi ${env.IMAGE_NAME} ${env.IMAGE_NAME_LATEST}"  */
    }
  }
